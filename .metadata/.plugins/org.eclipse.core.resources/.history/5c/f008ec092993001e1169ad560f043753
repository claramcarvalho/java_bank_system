package bus;

import java.util.Date;

public class CurrencyAccount extends Account {
<<<<<<< HEAD

	protected EnumTypeCurrency currency;
	
	protected Double currencyRate;
	
	protected Double conversionFees;
	
	

	public CurrencyAccount() {
		
		super();
		
		this.currency = EnumTypeCurrency.Undefined;
		
		this.currencyRate = (double) 0;
		
		this.conversionFees = (double) 0;
		
	}
	
	

	public CurrencyAccount(Integer accountNumber, EnumTypeAccount type, Double balance, Date openingDate, TransactionCollection transactions, EnumTypeCurrency currencyType, Double currencyRate, Double conversionFees) {
		super(accountNumber, type, balance, openingDate, transactions);
		
		this.currency = currencyType;
		this.currencyRate = currencyRate;
		this.conversionFees = conversionFees;
	}
	
	
=======
	
	private EnumTypeCurrency currency;
	private double currencyRate;
	private double conversionFees;
	
	
	public CurrencyAccount() {
		super();
		this.currency = EnumTypeCurrency.Undefined;
		this.currencyRate = 0.00;
		this.conversionFees = 0.00;
	}
	
	public CurrencyAccount(Integer accountNumber, EnumTypeAccount type, Double balance, Date openingDate,
			TransactionCollection transactions, EnumTypeCurrency currency, double currencyRate, double conversionFees) {
		super(accountNumber, type, balance, openingDate, transactions);
		this.currency = currency;
		this.currencyRate = currencyRate;
		this.conversionFees = conversionFees;
	}


>>>>>>> 86314dd123e80284c74340e6bd907fa9b1d1db20
	public EnumTypeCurrency getCurrency() {
		return currency;
	}

<<<<<<< HEAD

	public Double getCurrencyRate() {
		return currencyRate;
	}



	public void setCurrencyRate(Double currencyRate) {
		this.currencyRate = currencyRate;
	}



	public Double getConversionFees() {
		return conversionFees;
	}



	public void setConversionFees(Double conversionFees) {
		this.conversionFees = conversionFees;
	}


	@Override
	public void deposit(Double amount) { //amount in CAN$
		
		double convertedAmount = amount*this.getCurrencyRate();
		double bankFee =  convertedAmount*this.getConversionFees();
		double finalAmount = convertedAmount - bankFee;
		
		this.balance += finalAmount; //balance in another currency
=======
	public double getCurrencyRate() {
		return currencyRate;
	}

	public void setCurrencyRate(double currencyRate) {
		this.currencyRate = currencyRate;
	}

	public double getConversionFees() {
		return conversionFees;
	}

	public void setConversionFees(double conversionFees) {
		this.conversionFees = conversionFees;
	}

	@Override
	public void deposit(Integer transactionNumber, String description, Date transactionDate, Double amount,
			EnumTypeTransaction type) {

		if (amount > 0) {
            double convertedAmount = amount * this.currencyRate;

            this.balance += convertedAmount;

            this.balance -= conversionFees;

            Transaction transaction = new Transaction(transactionNumber, description, transactionDate, amount, type);
            this.transactions.add(transaction);
        }
>>>>>>> 86314dd123e80284c74340e6bd907fa9b1d1db20
		
	}

	@Override
<<<<<<< HEAD
	public void withdraw(Double amount) { //amount in CAN$???
		
		double convertedAmount = amount*this.getCurrencyRate();
		double bankFee =  convertedAmount*this.getConversionFees();
		double finalAmount = convertedAmount + bankFee;
		
		this.balance -= finalAmount; //balance in another currency
		
	}


	@Override
	public String toString() {
		return "Account Number: " + this.accountNumber +
				"\n\tType: " + this.type + 
				"\n\tCurrency : " + this.currency +
				"\n\tCurrency Rate : " + this.currencyRate +
				"\n\tConversion Fee : " + this.conversionFees +
				"\n\tDate of Opening : " + this.openingDate +
				"\n\tBalance : " + this.balance;
	}
	
	
=======
	public void withdraw(Integer transactionNumber, String description, Date transactionDate, Double amount,
			EnumTypeTransaction type) {

		if (amount > 0 && amount <= this.balance) {
            this.balance -= amount;

            this.balance -= conversionFees;

            Transaction transaction = new Transaction(transactionNumber, description, transactionDate, amount, type);
            this.transactions.add(transaction);
        }
		
	}

	@Override
	public String toString() {
		return super.toString() + "\n\tCurrency: " + currency + "\n\tCurrency Rate: " + currencyRate + 
								  "\n\tConversion Fees: " + conversionFees;
	}
>>>>>>> 86314dd123e80284c74340e6bd907fa9b1d1db20

}
