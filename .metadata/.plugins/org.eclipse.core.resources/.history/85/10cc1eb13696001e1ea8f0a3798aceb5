package data;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.time.LocalDate;
import java.util.ArrayList;
import java.sql.PreparedStatement;
import bus.*;

public class AccountDB {
	static private Connection myConnection;
	static private String mySQLStatement = null;	
	static private String mySQLQuery = null;
	
	public static Integer insertAccount(Account aNewAccount) throws SQLException {
		PreparedStatement myPreparedStatement = null ;
		ResultSet generatedKeys = null;
		String sqlStatement;
		
		sqlStatement = "insert into AccountBank values( ? , ? , ? , ? , ?)  ";
				
		myPreparedStatement = myConnection.prepareStatement(sqlStatement);		
		
		myPreparedStatement.setNull(1, Types.INTEGER);
		myPreparedStatement.setString(2, aNewAccount.getType().toString());
		myPreparedStatement.setInt(3, aNewAccount.getCustomer());	
		myPreparedStatement.setDouble(4, aNewAccount.getBalance());
		myPreparedStatement.setDate(5, Date.valueOf(aNewAccount.getOpeningDate()));
		
		myPreparedStatement.executeUpdate();	
		
		myConnection.commit();	
		
		generatedKeys = myPreparedStatement.getGeneratedKeys();

	    if (generatedKeys.next()) {
	        int generatedId = generatedKeys.getInt(1);
	        return generatedId;
	    }
		return null;
	}
	
    public static void insert(SavingAccount aNewSavingAccount) throws SQLException 
	{	
    	
    	Integer id = insertAccount(aNewSavingAccount);

	    if (id != null) {
	        PreparedStatement myPreparedStatement = null ;
			String sqlStatement;
			
			sqlStatement = "insert into SavingAccount values( ? , ? , ? , ? , ? , ? , ?, ?)  ";
					
			myPreparedStatement = myConnection.prepareStatement(sqlStatement);		
			
			myPreparedStatement.setInt(1, id);
			myPreparedStatement.setString(2, aNewSavingAccount.getType().toString());
			myPreparedStatement.setInt(3, aNewSavingAccount.getCustomer());	
			myPreparedStatement.setDouble(4, aNewSavingAccount.getBalance());
			myPreparedStatement.setDate(5, Date.valueOf(aNewSavingAccount.getOpeningDate()));
			myPreparedStatement.setDouble(6, aNewSavingAccount.getInterestRate());
			myPreparedStatement.setDouble(7, aNewSavingAccount.getGain());
			myPreparedStatement.setDate(8, Date.valueOf(aNewSavingAccount.getDueDate()));
			
			myPreparedStatement.executeUpdate();	
			
			myConnection.commit();	
	    }
	}
    
    public static void insert(CheckingAccount aNewCheckingAccount) throws SQLException 
	{	 	
    	Integer id = insertAccount(aNewCheckingAccount);
   
	    if (id != null) {
	        PreparedStatement myPreparedStatement = null ;
			String sqlStatement;
			
			sqlStatement = "insert into CheckingAccount values( ? , ? , ? , ? , ? , ? , ?)  ";
					
			myPreparedStatement = myConnection.prepareStatement(sqlStatement);		
			
			myPreparedStatement.setInt(1, id);
			myPreparedStatement.setString(2, aNewCheckingAccount.getType().toString());
			myPreparedStatement.setInt(3, aNewCheckingAccount.getCustomer());	
			myPreparedStatement.setDouble(4, aNewCheckingAccount.getBalance());
			myPreparedStatement.setDate(5, Date.valueOf(aNewCheckingAccount.getOpeningDate()));
			myPreparedStatement.setInt(6, aNewCheckingAccount.getMonthlyTransactionLimit());
			myPreparedStatement.setDouble(7, aNewCheckingAccount.getTransactionFees());
			
			myPreparedStatement.executeUpdate();	
			
			myConnection.commit();	
	    }
	}
    
    public static void insert(CurrencyAccount aNewCurrencyAccount) throws SQLException 
	{	 	
    	Integer id = insertAccount(aNewCurrencyAccount);
    	   
	    if (id != null) {
	        
	        PreparedStatement myPreparedStatement = null ;
			String sqlStatement;
			
			sqlStatement = "insert into CurrencyAccount values( ? , ? , ? , ? , ? , ? , ?)  ";
					
			myPreparedStatement = myConnection.prepareStatement(sqlStatement);		
			
			myPreparedStatement.setInt(1, id);
			myPreparedStatement.setString(2, aNewCurrencyAccount.getType().toString());
			myPreparedStatement.setInt(3, aNewCurrencyAccount.getCustomer());	
			myPreparedStatement.setDouble(4, aNewCurrencyAccount.getBalance());
			myPreparedStatement.setDate(5, Date.valueOf(aNewCurrencyAccount.getOpeningDate()));
			myPreparedStatement.setString(6, aNewCurrencyAccount.getCurrency().toString());
			myPreparedStatement.setDouble(7, aNewCurrencyAccount.getCurrencyRate());
			myPreparedStatement.setDouble(8, aNewCurrencyAccount.getConversionFees());
			
			myPreparedStatement.executeUpdate();	
			
			myConnection.commit();	
	    }
	}
    
    public static void insert(CreditAccount aNewCreditAccount) throws SQLException 
	{	 	
    	Integer id = insertAccount(aNewCreditAccount);
    	   
	    if (id != null) {
	        
	        PreparedStatement myPreparedStatement = null ;
			String sqlStatement;
			
			sqlStatement = "insert into CurrencyAccount values( ? , ? , ? , ? , ? , ? , ?)  ";
					
			myPreparedStatement = myConnection.prepareStatement(sqlStatement);		
			
			myPreparedStatement.setInt(1, id);
			myPreparedStatement.setString(2, aNewCreditAccount.getType().toString());
			myPreparedStatement.setInt(3, aNewCreditAccount.getCustomer());	
			myPreparedStatement.setDouble(4, aNewCreditAccount.getBalance());
			myPreparedStatement.setDate(5, Date.valueOf(aNewCreditAccount.getOpeningDate()));
			myPreparedStatement.setDate(6, Date.valueOf(aNewCreditAccount.getDueDate()));
			myPreparedStatement.setDouble(7, aNewCreditAccount.getLimit());
			
			myPreparedStatement.executeUpdate();	
			
			myConnection.commit();	
	    }
	}
    
	public static void updateAccount(Account aChangedAccount) throws SQLException {
		
		myConnection = DBConnection.getConnection();
		
		mySQLStatement = "update AccountBank set balance =  \'"    
				
			              +   aChangedAccount.getBalance() +    "\' WHERE  accountid = "
			                  
			              +  aChangedAccount.getAccountNumber();
	
		Statement myStatemnt = myConnection.createStatement();
		myStatemnt.executeUpdate(mySQLStatement);
		myConnection.commit();								
	}
    
	public static void updateSavingAccount(SavingAccount aChangedAccount) throws SQLException {
		
		myConnection = DBConnection.getConnection();
		
		mySQLStatement = "update SavingAccount set interest_rate =  \'"    
			              +   aChangedAccount.getInterestRate() + ", due_date = \'" 
			              +   aChangedAccount.getDueDate() + "\' WHERE  savingsaccountid = "
			              +  aChangedAccount.getAccountNumber();
	
		Statement myStatemnt = myConnection.createStatement();
		myStatemnt.executeUpdate(mySQLStatement);
		myConnection.commit();								
	}
	
	public static void updateCheckingAccount(CheckingAccount aChangedAccount) throws SQLException {
		
		myConnection = DBConnection.getConnection();
		
		mySQLStatement = "update CheckingAccount set month_trans_limit =  \'"    
			              +   aChangedAccount.getMonthlyTransactionLimit() + ", trans_fee = \'" 
			              +   aChangedAccount.getTransactionFees() + "\' WHERE  checkingaccountid = "
			              +  aChangedAccount.getAccountNumber();
	
		Statement myStatemnt = myConnection.createStatement();
		myStatemnt.executeUpdate(mySQLStatement);
		myConnection.commit();								
	}
	
	public static void updateCurrencyAccount(CurrencyAccount aChangedAccount) throws SQLException {
		
		myConnection = DBConnection.getConnection();
		
		mySQLStatement = "update CurrencyAccount set currency =  \'"    
			              +   aChangedAccount.getCurrency().toString() + ", currency_rate = \'" 
			              +   aChangedAccount.getCurrencyRate() + ", conv_fee = \'" 
			              +   aChangedAccount.getConversionFees() + "\' WHERE  currencyaccountid = "
			              +   aChangedAccount.getAccountNumber();
	
		Statement myStatemnt = myConnection.createStatement();
		myStatemnt.executeUpdate(mySQLStatement);
		myConnection.commit();								
	}
	
	public static void updateCreditAccount(CreditAccount aChangedAccount) throws SQLException {
		
		myConnection = DBConnection.getConnection();
		
		mySQLStatement = "update CreditAccount set due_date =  \'"    
			              +   Date.valueOf(aChangedAccount.getDueDate()) + ", limit = \'" 
			              +   aChangedAccount.getLimit() + "\' WHERE  creditaccountid = "
			              +   aChangedAccount.getAccountNumber();
	
		Statement myStatemnt = myConnection.createStatement();
		myStatemnt.executeUpdate(mySQLStatement);
		myConnection.commit();								
	}
    
	public static void delete(Integer id ) throws SQLException {
		
		myConnection = DBConnection.getConnection();
		
		mySQLStatement = "Delete FROM accountbank WHERE accountid = "  + id  ;
	
		Statement myStatemnt = myConnection.createStatement();
		myStatemnt.executeUpdate(mySQLStatement);
		myConnection.commit();	

	}
	
	public static SavingAccount searchSavingAccount(Integer id) throws SQLException, ExceptionIsNull, ExceptionIsNotANumber, ExceptionIsPassedDate{
		
		SavingAccount aSavingAccount = null;
		
		myConnection = DBConnection.getConnection();
		
		mySQLQuery = "SELECT a.accountid, a.customerid, a.balance, a.openingdate, s.due_date, s.interest_rate, s.gain, s.due_date"
					+ "FROM accountbank a "
					+ "JOIN savingaccount s ON a.accountid = s.savingsaccountid "
					+ "WHERE a.accountid = " + id ;
		
		Statement myStatemnt = myConnection.createStatement();
		
		ResultSet myResultSet = myStatemnt.executeQuery(mySQLQuery);
		
		if(myResultSet.next()) {
			EnumTypeAccount type = EnumTypeAccount.valueOf(myResultSet.getString("typeaccount"));
            Integer customerid = myResultSet.getInt("customerid");		//ALTERAR CLASSE PARA RECEBER CUSTOMER ID
            Double balance = myResultSet.getDouble("balance");
            LocalDate openingDate = myResultSet.getDate("openingdate").toLocalDate();
            Double interestRate = myResultSet.getDouble("interest_rate");
            LocalDate dueDate = myResultSet.getDate("due_date").toLocalDate();

            aSavingAccount = new SavingAccount(type, customerid, balance, openingDate, interestRate, dueDate); 	//REMOVER TRANSACTIONS DOS ATRIBUTOS DA CLASSE
		}	
		
		return aSavingAccount;
	}
	
	public static CheckingAccount searchCheckingAccount(Integer id) throws SQLException, ExceptionIsNull, ExceptionIsNotANumber, ExceptionIsPassedDate{
		
		CheckingAccount aCheckingAccount = null;
		
		myConnection = DBConnection.getConnection();
		
		mySQLQuery = "SELECT a.accountid, a.customerid, a.balance, a.openingdate, a.typeaccount, c.month_trans_limit, c.trans_fee"
					+ "FROM accountbank a "
					+ "JOIN checkingaccount c ON a.accountid = c.checkingaccountid "
					+ "WHERE a.accountid = " + id ;
		
		Statement myStatemnt = myConnection.createStatement();
		
		ResultSet myResultSet = myStatemnt.executeQuery(mySQLQuery);
		
		if(myResultSet.next()) {
			EnumTypeAccount type = EnumTypeAccount.valueOf(myResultSet.getString("typeaccount"));
            Integer customerid = myResultSet.getInt("customerid");		
            Double balance = myResultSet.getDouble("balance");
            LocalDate openingDate = myResultSet.getDate("openingdate").toLocalDate();
            Integer monthly_limit = myResultSet.getInt("month_trans_limit");
            Double transactionFees = myResultSet.getDouble("trans_fee");

            aCheckingAccount = new CheckingAccount(type, customerid, balance, openingDate, monthly_limit, transactionFees);
		}	
		
		return aCheckingAccount;
	}
	
	public static CurrencyAccount searchCurrencyAccount(Integer id) throws SQLException, ExceptionIsNull, ExceptionIsNotANumber, ExceptionIsPassedDate{
		
		CurrencyAccount aCurrencyAccount = null;
		
		myConnection = DBConnection.getConnection();
		
		mySQLQuery = "SELECT a.accountid, a.customerid, a.balance, a.openingdate, a.typeaccount, c.currency, c.currency_rate, c.conv_fee"
					+ "FROM accountbank a "
					+ "JOIN currencyaccount c ON a.accountid = c.currencyaccountid "
					+ "WHERE a.accountid = " + id ;
		
		Statement myStatemnt = myConnection.createStatement();
		
		ResultSet myResultSet = myStatemnt.executeQuery(mySQLQuery);
		
		if(myResultSet.next()) {
			EnumTypeAccount type = EnumTypeAccount.valueOf(myResultSet.getString("typeaccount"));
            Integer customerid = myResultSet.getInt("customerid");		
            Double balance = myResultSet.getDouble("balance");
            LocalDate openingDate = myResultSet.getDate("openingdate").toLocalDate();
            EnumTypeCurrency currency = EnumTypeCurrency.valueOf(myResultSet.getString("currency"));
            Double currency_rate = myResultSet.getDouble("currency_rate");
            Double conv_fee = myResultSet.getDouble("conv_fee");

            aCurrencyAccount = new CurrencyAccount(type, customerid, balance, openingDate, currency, currency_rate, conv_fee);
		}	
		
		return aCurrencyAccount;
	}
	
	public static CreditAccount searchCreditAccount(Integer id) throws SQLException, ExceptionIsNull, ExceptionIsNotANumber, ExceptionIsPassedDate{
		
		CreditAccount aCreditAccount = null;
		
		myConnection = DBConnection.getConnection();
		
		mySQLQuery = "SELECT a.accountid, a.customerid, a.balance, a.openingdate, a.typeaccount, c.duedate, c.limit"
					+ "FROM accountbank a "
					+ "JOIN creditaccount c ON a.accountid = c.creditaccountid "
					+ "WHERE a.accountid = " + id ;
		
		Statement myStatemnt = myConnection.createStatement();
		
		ResultSet myResultSet = myStatemnt.executeQuery(mySQLQuery);
		
		if(myResultSet.next()) {
			EnumTypeAccount type = EnumTypeAccount.valueOf(myResultSet.getString("typeaccount"));
            Integer customerid = myResultSet.getInt("customerid");		
            Double balance = myResultSet.getDouble("balance");
            LocalDate openingDate = myResultSet.getDate("openingdate").toLocalDate();
            LocalDate dueDate = myResultSet.getDate("duedate").toLocalDate();
            Double limit = myResultSet.getDouble("limit");

            aCreditAccount = new CreditAccount(type, customerid, balance, openingDate, dueDate, limit);
		}	
		
		return aCreditAccount;
	}
	
	public static ArrayList<SavingAccount> selectSavingAccount() throws SQLException, ExceptionIsNull, ExceptionIsNotANumber, ExceptionIsPassedDate{
		
		SavingAccount aSavingAccount = null;
		myConnection = DBConnection.getConnection();
		
		mySQLQuery = "SELECT a.accountid, a.customerid, a.balance, a.openingdate, a.typeaccount, s.due_date, s.interest_rate, s.gain"
				+ "FROM accountbank a "
				+ "JOIN savingaccount s ON a.accountid = s.savingsaccountid";
		
		Statement myStatemnt = myConnection.createStatement();
		
		ResultSet myResultSet = myStatemnt.executeQuery(mySQLQuery);
		
		ArrayList<SavingAccount> myList = new ArrayList<SavingAccount>();
		
		while(myResultSet.next()) {
			EnumTypeAccount type = EnumTypeAccount.valueOf(myResultSet.getString("typeaccount"));
            Integer customerid = myResultSet.getInt("customerid");
            Double balance = myResultSet.getDouble("balance");
            LocalDate openingDate = myResultSet.getDate("openingdate").toLocalDate();
            Double interestRate = myResultSet.getDouble("interest_rate");
            LocalDate dueDate = myResultSet.getDate("due_date").toLocalDate();

            aSavingAccount = new SavingAccount(type, customerid, balance, openingDate, interestRate, dueDate);
			
			aSavingAccount = new SavingAccount(type, customerid, balance, openingDate, interestRate, dueDate);
			
			myList.add(aSavingAccount);
		}
		
		return myList;
	}
	
public static ArrayList<CheckingAccount> selectCheckingAccount() throws SQLException, ExceptionIsNull, ExceptionIsNotANumber{
		
		CheckingAccount aCheckingAccount = null;
		myConnection = DBConnection.getConnection();
		
		mySQLQuery = "SELECT a.accountid, a.customerid, a.balance, a.openingdate, a.typeaccount, c.month_trans_limit, c.trans_fee"
				+ "FROM accountbank a "
				+ "JOIN checkingaccount c ON a.accountid = c.checkingaccountid ";
		
		Statement myStatemnt = myConnection.createStatement();
		
		ResultSet myResultSet = myStatemnt.executeQuery(mySQLQuery);
		
		ArrayList<CheckingAccount> myList = new ArrayList<CheckingAccount>();
		
		while(myResultSet.next()) {
			EnumTypeAccount type = EnumTypeAccount.valueOf(myResultSet.getString("typeaccount"));
            Integer customerid = myResultSet.getInt("customerid");		
            Double balance = myResultSet.getDouble("balance");
            LocalDate openingDate = myResultSet.getDate("openingdate").toLocalDate();
            Integer monthly_limit = myResultSet.getInt("month_trans_limit");
            Double transactionFees = myResultSet.getDouble("trans_fee");

            aCheckingAccount = new CheckingAccount(type, customerid, balance, openingDate, monthly_limit, transactionFees);

			myList.add(aCheckingAccount);
		}
		
		return myList;
	}
}

public static ArrayList<CurrencyAccount> selectCurrencyAccount() throws SQLException{
	
	CurrencyAccount aCurrencyAccount = null;
	myConnection = DBConnection.getConnection();
	
	mySQLQuery = "SELECT a.accountid, a.customerid, a.balance, a.openingdate, a.typeaccount, c.currency, c.currency_rate, c.conv_fee"
			+ "FROM accountbank a "
			+ "JOIN currencyaccount c ON a.accountid = c.currencyaccountid ";
	
	Statement myStatemnt = myConnection.createStatement();
	
	ResultSet myResultSet = myStatemnt.executeQuery(mySQLQuery);
	
	ArrayList<CurrencyAccount> myList = new ArrayList<CurrencyAccount>();
	
	while(myResultSet.next()) {
		EnumTypeAccount type = EnumTypeAccount.valueOf(myResultSet.getString("typeaccount"));
        Integer customerid = myResultSet.getInt("customerid");		
        Double balance = myResultSet.getDouble("balance");
        LocalDate openingDate = myResultSet.getDate("openingdate").toLocalDate();
        EnumTypeCurrency currency = EnumTypeCurrency.valueOf(myResultSet.getString("currency"));
        Double currency_rate = myResultSet.getDouble("currency_rate");
        Double conv_fee = myResultSet.getDouble("conv_fee");

        aCurrencyAccount = new CurrencyAccount(type, customerid, balance, openingDate, currency, currency_rate, conv_fee);

		myList.add(aCurrencyAccount);
	}
	
	return myList;
}

}
