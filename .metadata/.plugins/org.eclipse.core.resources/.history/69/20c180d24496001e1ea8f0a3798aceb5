package bus;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import data.AccountDB;
import data.CustomerDB;
import data.SavingAccountDB;
import data.UserDB;

public class Manager extends User {

	private static final long serialVersionUID = 1549592684555251124L;
	private Integer id;

	public Manager() {
		super();
		this.id = null;
	}
	
	public Manager(Integer id, String userName, Integer password) {
		super(id, userName, password);
		this.id = id;
		
	}
	
	public void openSavingAccount(Integer customer, Double balance, Double interestRate, LocalDate dueDate) throws ExceptionIsNull, ExceptionIsNotANumber, ExceptionIsPassedDate, ClassNotFoundException, IOException, SQLException {
		SavingAccount savingAccount = new SavingAccount(EnumTypeAccount.SavingAccount, customer, balance, LocalDate.now(), 
				interestRate, dueDate);
		
		SavingAccountDB.insert(savingAccount);
	}
	
	public void openCheckingAccount(Integer customer, Double balance, Integer monthlyTransactionLimit, Double transactionFees) throws ExceptionIsNull, ExceptionIsNotANumber, ExceptionIsPassedDate, ClassNotFoundException, IOException {
		CheckingAccount checkingAccount = new CheckingAccount(EnumTypeAccount.CheckingAccount, customer, balance, LocalDate.now(), 
				monthlyTransactionLimit, transactionFees);
		
		SavingAccountDB.insert(checkingAccount);
	}
	
	public void openCurrencyAccount(Integer customer, Double balance, EnumTypeCurrency currency, Double currencyRate, Double conversionFees) throws ExceptionIsNull, ExceptionIsNotANumber, ExceptionIsPassedDate, ClassNotFoundException, IOException {
		new CurrencyAccount(EnumTypeAccount.CurrencyAccount, customer, balance, LocalDate.now(), 
				currency, currencyRate, conversionFees);
	}
	
	public void openCreditAccount(Integer customer, Double balance, LocalDate dueDate, Double limit) throws ExceptionIsNull, ExceptionIsNotANumber, ExceptionIsPassedDate, ClassNotFoundException, IOException {
		new CreditAccount(EnumTypeAccount.CreditAccount, customer, balance, LocalDate.now(), 
				dueDate, limit);
	}
	
//	public void openLineOfCreditAccount(Customer customer, LocalDate dueDate, Double limit, Double interestRate) throws ExceptionIsNull, ExceptionIsNotANumber, ExceptionIsPassedDate, ExceptionNegativeAmount, ClassNotFoundException, IOException {
//		Account newAccount = new LineOfCreditAccount(EnumTypeAccount.LineOfCreditAccount, customer, LocalDate.now(), 
//				new TransactionCollection(), dueDate, limit, interestRate);
//	}


	public void closeAccount(Integer accountNumber) throws SQLException {
		if (accountNumber != null) {
			AccountDB.delete(accountNumber);
		}
	}
	
	public Customer createCustomer(String username, Integer password, Double salary, Integer mgr) throws SQLException, ExceptionIsNotANumber, ExceptionIsNull {
		Customer newCustomer = new Customer(null, username, password, salary, mgr);
		CustomerDB.insert(newCustomer);
		
		return newCustomer;
		
	}
	
	public void removeCustomer(Integer customer) throws SQLException {
        if (customer != null) {
            UserDB.delete(customer);
        }
	}

	@Override
	public String toString() {
		return super.toString() + "\n\tManager id: " + this.id;
	}
	
}
